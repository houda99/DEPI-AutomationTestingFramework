/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 249.0, "minX": 0.0, "maxY": 27934.0, "series": [{"data": [[0.0, 249.0], [0.1, 250.0], [0.2, 250.0], [0.3, 251.0], [0.4, 251.0], [0.5, 251.0], [0.6, 251.0], [0.7, 252.0], [0.8, 252.0], [0.9, 252.0], [1.0, 252.0], [1.1, 252.0], [1.2, 252.0], [1.3, 252.0], [1.4, 252.0], [1.5, 252.0], [1.6, 252.0], [1.7, 253.0], [1.8, 253.0], [1.9, 253.0], [2.0, 253.0], [2.1, 253.0], [2.2, 253.0], [2.3, 253.0], [2.4, 253.0], [2.5, 253.0], [2.6, 253.0], [2.7, 254.0], [2.8, 254.0], [2.9, 254.0], [3.0, 254.0], [3.1, 254.0], [3.2, 254.0], [3.3, 254.0], [3.4, 254.0], [3.5, 254.0], [3.6, 254.0], [3.7, 254.0], [3.8, 254.0], [3.9, 254.0], [4.0, 254.0], [4.1, 254.0], [4.2, 254.0], [4.3, 254.0], [4.4, 254.0], [4.5, 254.0], [4.6, 255.0], [4.7, 255.0], [4.8, 255.0], [4.9, 255.0], [5.0, 255.0], [5.1, 255.0], [5.2, 255.0], [5.3, 255.0], [5.4, 255.0], [5.5, 255.0], [5.6, 255.0], [5.7, 255.0], [5.8, 255.0], [5.9, 255.0], [6.0, 255.0], [6.1, 255.0], [6.2, 255.0], [6.3, 255.0], [6.4, 255.0], [6.5, 255.0], [6.6, 255.0], [6.7, 255.0], [6.8, 255.0], [6.9, 255.0], [7.0, 255.0], [7.1, 255.0], [7.2, 255.0], [7.3, 256.0], [7.4, 256.0], [7.5, 256.0], [7.6, 256.0], [7.7, 256.0], [7.8, 256.0], [7.9, 256.0], [8.0, 256.0], [8.1, 256.0], [8.2, 256.0], [8.3, 256.0], [8.4, 256.0], [8.5, 256.0], [8.6, 256.0], [8.7, 256.0], [8.8, 256.0], [8.9, 256.0], [9.0, 256.0], [9.1, 256.0], [9.2, 256.0], [9.3, 256.0], [9.4, 256.0], [9.5, 256.0], [9.6, 256.0], [9.7, 257.0], [9.8, 257.0], [9.9, 257.0], [10.0, 257.0], [10.1, 257.0], [10.2, 257.0], [10.3, 257.0], [10.4, 257.0], [10.5, 257.0], [10.6, 257.0], [10.7, 257.0], [10.8, 257.0], [10.9, 257.0], [11.0, 257.0], [11.1, 257.0], [11.2, 257.0], [11.3, 257.0], [11.4, 257.0], [11.5, 257.0], [11.6, 257.0], [11.7, 257.0], [11.8, 257.0], [11.9, 257.0], [12.0, 257.0], [12.1, 257.0], [12.2, 257.0], [12.3, 257.0], [12.4, 257.0], [12.5, 257.0], [12.6, 257.0], [12.7, 257.0], [12.8, 257.0], [12.9, 258.0], [13.0, 258.0], [13.1, 258.0], [13.2, 258.0], [13.3, 258.0], [13.4, 258.0], [13.5, 258.0], [13.6, 258.0], [13.7, 258.0], [13.8, 258.0], [13.9, 258.0], [14.0, 258.0], [14.1, 258.0], [14.2, 258.0], [14.3, 258.0], [14.4, 258.0], [14.5, 258.0], [14.6, 258.0], [14.7, 258.0], [14.8, 258.0], [14.9, 258.0], [15.0, 258.0], [15.1, 258.0], [15.2, 258.0], [15.3, 258.0], [15.4, 258.0], [15.5, 258.0], [15.6, 258.0], [15.7, 258.0], [15.8, 258.0], [15.9, 258.0], [16.0, 259.0], [16.1, 259.0], [16.2, 259.0], [16.3, 259.0], [16.4, 259.0], [16.5, 259.0], [16.6, 259.0], [16.7, 259.0], [16.8, 259.0], [16.9, 259.0], [17.0, 259.0], [17.1, 259.0], [17.2, 259.0], [17.3, 259.0], [17.4, 259.0], [17.5, 259.0], [17.6, 259.0], [17.7, 259.0], [17.8, 259.0], [17.9, 259.0], [18.0, 259.0], [18.1, 259.0], [18.2, 259.0], [18.3, 259.0], [18.4, 259.0], [18.5, 259.0], [18.6, 259.0], [18.7, 259.0], [18.8, 259.0], [18.9, 259.0], [19.0, 259.0], [19.1, 259.0], [19.2, 260.0], [19.3, 260.0], [19.4, 260.0], [19.5, 260.0], [19.6, 260.0], [19.7, 260.0], [19.8, 260.0], [19.9, 260.0], [20.0, 260.0], [20.1, 260.0], [20.2, 260.0], [20.3, 260.0], [20.4, 260.0], [20.5, 260.0], [20.6, 260.0], [20.7, 260.0], [20.8, 260.0], [20.9, 260.0], [21.0, 261.0], [21.1, 261.0], [21.2, 261.0], [21.3, 261.0], [21.4, 261.0], [21.5, 261.0], [21.6, 261.0], [21.7, 261.0], [21.8, 261.0], [21.9, 261.0], [22.0, 261.0], [22.1, 261.0], [22.2, 261.0], [22.3, 261.0], [22.4, 261.0], [22.5, 262.0], [22.6, 262.0], [22.7, 262.0], [22.8, 262.0], [22.9, 262.0], [23.0, 262.0], [23.1, 262.0], [23.2, 262.0], [23.3, 262.0], [23.4, 262.0], [23.5, 262.0], [23.6, 262.0], [23.7, 263.0], [23.8, 263.0], [23.9, 263.0], [24.0, 263.0], [24.1, 263.0], [24.2, 263.0], [24.3, 263.0], [24.4, 263.0], [24.5, 263.0], [24.6, 263.0], [24.7, 263.0], [24.8, 263.0], [24.9, 263.0], [25.0, 263.0], [25.1, 263.0], [25.2, 264.0], [25.3, 264.0], [25.4, 264.0], [25.5, 264.0], [25.6, 264.0], [25.7, 264.0], [25.8, 264.0], [25.9, 264.0], [26.0, 264.0], [26.1, 265.0], [26.2, 265.0], [26.3, 265.0], [26.4, 265.0], [26.5, 265.0], [26.6, 265.0], [26.7, 265.0], [26.8, 265.0], [26.9, 265.0], [27.0, 265.0], [27.1, 266.0], [27.2, 266.0], [27.3, 266.0], [27.4, 266.0], [27.5, 266.0], [27.6, 266.0], [27.7, 266.0], [27.8, 267.0], [27.9, 267.0], [28.0, 267.0], [28.1, 267.0], [28.2, 267.0], [28.3, 267.0], [28.4, 267.0], [28.5, 267.0], [28.6, 268.0], [28.7, 268.0], [28.8, 268.0], [28.9, 268.0], [29.0, 268.0], [29.1, 268.0], [29.2, 268.0], [29.3, 268.0], [29.4, 268.0], [29.5, 269.0], [29.6, 269.0], [29.7, 269.0], [29.8, 269.0], [29.9, 269.0], [30.0, 269.0], [30.1, 270.0], [30.2, 270.0], [30.3, 270.0], [30.4, 270.0], [30.5, 270.0], [30.6, 270.0], [30.7, 270.0], [30.8, 271.0], [30.9, 271.0], [31.0, 271.0], [31.1, 271.0], [31.2, 271.0], [31.3, 271.0], [31.4, 271.0], [31.5, 272.0], [31.6, 272.0], [31.7, 272.0], [31.8, 272.0], [31.9, 272.0], [32.0, 272.0], [32.1, 273.0], [32.2, 273.0], [32.3, 273.0], [32.4, 274.0], [32.5, 274.0], [32.6, 274.0], [32.7, 274.0], [32.8, 274.0], [32.9, 275.0], [33.0, 275.0], [33.1, 275.0], [33.2, 276.0], [33.3, 276.0], [33.4, 276.0], [33.5, 276.0], [33.6, 276.0], [33.7, 276.0], [33.8, 277.0], [33.9, 278.0], [34.0, 278.0], [34.1, 278.0], [34.2, 278.0], [34.3, 279.0], [34.4, 279.0], [34.5, 279.0], [34.6, 280.0], [34.7, 280.0], [34.8, 280.0], [34.9, 281.0], [35.0, 281.0], [35.1, 281.0], [35.2, 281.0], [35.3, 281.0], [35.4, 282.0], [35.5, 282.0], [35.6, 283.0], [35.7, 283.0], [35.8, 284.0], [35.9, 284.0], [36.0, 285.0], [36.1, 285.0], [36.2, 286.0], [36.3, 286.0], [36.4, 286.0], [36.5, 287.0], [36.6, 288.0], [36.7, 288.0], [36.8, 289.0], [36.9, 289.0], [37.0, 289.0], [37.1, 290.0], [37.2, 290.0], [37.3, 291.0], [37.4, 291.0], [37.5, 292.0], [37.6, 293.0], [37.7, 295.0], [37.8, 296.0], [37.9, 296.0], [38.0, 297.0], [38.1, 300.0], [38.2, 302.0], [38.3, 304.0], [38.4, 306.0], [38.5, 307.0], [38.6, 307.0], [38.7, 309.0], [38.8, 311.0], [38.9, 313.0], [39.0, 314.0], [39.1, 315.0], [39.2, 316.0], [39.3, 316.0], [39.4, 317.0], [39.5, 318.0], [39.6, 319.0], [39.7, 319.0], [39.8, 321.0], [39.9, 322.0], [40.0, 323.0], [40.1, 323.0], [40.2, 325.0], [40.3, 325.0], [40.4, 326.0], [40.5, 327.0], [40.6, 327.0], [40.7, 327.0], [40.8, 328.0], [40.9, 328.0], [41.0, 329.0], [41.1, 330.0], [41.2, 330.0], [41.3, 330.0], [41.4, 331.0], [41.5, 331.0], [41.6, 331.0], [41.7, 332.0], [41.8, 332.0], [41.9, 332.0], [42.0, 333.0], [42.1, 333.0], [42.2, 334.0], [42.3, 335.0], [42.4, 335.0], [42.5, 335.0], [42.6, 336.0], [42.7, 336.0], [42.8, 336.0], [42.9, 337.0], [43.0, 337.0], [43.1, 337.0], [43.2, 337.0], [43.3, 337.0], [43.4, 337.0], [43.5, 338.0], [43.6, 338.0], [43.7, 338.0], [43.8, 339.0], [43.9, 339.0], [44.0, 339.0], [44.1, 340.0], [44.2, 340.0], [44.3, 340.0], [44.4, 340.0], [44.5, 340.0], [44.6, 340.0], [44.7, 341.0], [44.8, 341.0], [44.9, 341.0], [45.0, 342.0], [45.1, 342.0], [45.2, 342.0], [45.3, 343.0], [45.4, 344.0], [45.5, 344.0], [45.6, 344.0], [45.7, 344.0], [45.8, 345.0], [45.9, 345.0], [46.0, 346.0], [46.1, 346.0], [46.2, 346.0], [46.3, 347.0], [46.4, 347.0], [46.5, 347.0], [46.6, 348.0], [46.7, 348.0], [46.8, 349.0], [46.9, 349.0], [47.0, 350.0], [47.1, 351.0], [47.2, 351.0], [47.3, 351.0], [47.4, 351.0], [47.5, 352.0], [47.6, 352.0], [47.7, 352.0], [47.8, 353.0], [47.9, 353.0], [48.0, 353.0], [48.1, 354.0], [48.2, 354.0], [48.3, 354.0], [48.4, 354.0], [48.5, 355.0], [48.6, 355.0], [48.7, 355.0], [48.8, 355.0], [48.9, 356.0], [49.0, 356.0], [49.1, 356.0], [49.2, 357.0], [49.3, 357.0], [49.4, 358.0], [49.5, 358.0], [49.6, 358.0], [49.7, 358.0], [49.8, 358.0], [49.9, 358.0], [50.0, 359.0], [50.1, 359.0], [50.2, 359.0], [50.3, 360.0], [50.4, 360.0], [50.5, 360.0], [50.6, 360.0], [50.7, 360.0], [50.8, 360.0], [50.9, 361.0], [51.0, 361.0], [51.1, 361.0], [51.2, 361.0], [51.3, 361.0], [51.4, 361.0], [51.5, 362.0], [51.6, 362.0], [51.7, 363.0], [51.8, 363.0], [51.9, 363.0], [52.0, 364.0], [52.1, 364.0], [52.2, 364.0], [52.3, 365.0], [52.4, 365.0], [52.5, 366.0], [52.6, 366.0], [52.7, 367.0], [52.8, 368.0], [52.9, 368.0], [53.0, 368.0], [53.1, 369.0], [53.2, 369.0], [53.3, 369.0], [53.4, 369.0], [53.5, 370.0], [53.6, 370.0], [53.7, 370.0], [53.8, 371.0], [53.9, 372.0], [54.0, 372.0], [54.1, 373.0], [54.2, 373.0], [54.3, 373.0], [54.4, 374.0], [54.5, 375.0], [54.6, 375.0], [54.7, 376.0], [54.8, 376.0], [54.9, 376.0], [55.0, 377.0], [55.1, 377.0], [55.2, 378.0], [55.3, 378.0], [55.4, 378.0], [55.5, 378.0], [55.6, 379.0], [55.7, 379.0], [55.8, 380.0], [55.9, 380.0], [56.0, 380.0], [56.1, 380.0], [56.2, 381.0], [56.3, 381.0], [56.4, 381.0], [56.5, 382.0], [56.6, 383.0], [56.7, 383.0], [56.8, 383.0], [56.9, 384.0], [57.0, 384.0], [57.1, 385.0], [57.2, 385.0], [57.3, 386.0], [57.4, 386.0], [57.5, 386.0], [57.6, 387.0], [57.7, 388.0], [57.8, 389.0], [57.9, 389.0], [58.0, 390.0], [58.1, 391.0], [58.2, 392.0], [58.3, 392.0], [58.4, 392.0], [58.5, 393.0], [58.6, 393.0], [58.7, 393.0], [58.8, 394.0], [58.9, 394.0], [59.0, 395.0], [59.1, 395.0], [59.2, 395.0], [59.3, 396.0], [59.4, 396.0], [59.5, 397.0], [59.6, 398.0], [59.7, 399.0], [59.8, 399.0], [59.9, 400.0], [60.0, 400.0], [60.1, 401.0], [60.2, 402.0], [60.3, 403.0], [60.4, 403.0], [60.5, 403.0], [60.6, 404.0], [60.7, 404.0], [60.8, 405.0], [60.9, 405.0], [61.0, 406.0], [61.1, 407.0], [61.2, 407.0], [61.3, 408.0], [61.4, 409.0], [61.5, 409.0], [61.6, 410.0], [61.7, 410.0], [61.8, 411.0], [61.9, 411.0], [62.0, 412.0], [62.1, 413.0], [62.2, 413.0], [62.3, 414.0], [62.4, 414.0], [62.5, 414.0], [62.6, 414.0], [62.7, 415.0], [62.8, 416.0], [62.9, 417.0], [63.0, 417.0], [63.1, 417.0], [63.2, 418.0], [63.3, 419.0], [63.4, 419.0], [63.5, 419.0], [63.6, 420.0], [63.7, 421.0], [63.8, 421.0], [63.9, 421.0], [64.0, 421.0], [64.1, 422.0], [64.2, 422.0], [64.3, 423.0], [64.4, 424.0], [64.5, 424.0], [64.6, 424.0], [64.7, 424.0], [64.8, 425.0], [64.9, 425.0], [65.0, 426.0], [65.1, 426.0], [65.2, 426.0], [65.3, 427.0], [65.4, 427.0], [65.5, 428.0], [65.6, 429.0], [65.7, 429.0], [65.8, 430.0], [65.9, 430.0], [66.0, 431.0], [66.1, 431.0], [66.2, 431.0], [66.3, 432.0], [66.4, 432.0], [66.5, 433.0], [66.6, 433.0], [66.7, 434.0], [66.8, 435.0], [66.9, 435.0], [67.0, 435.0], [67.1, 436.0], [67.2, 436.0], [67.3, 436.0], [67.4, 437.0], [67.5, 438.0], [67.6, 439.0], [67.7, 440.0], [67.8, 440.0], [67.9, 441.0], [68.0, 442.0], [68.1, 442.0], [68.2, 442.0], [68.3, 443.0], [68.4, 444.0], [68.5, 445.0], [68.6, 445.0], [68.7, 446.0], [68.8, 446.0], [68.9, 447.0], [69.0, 448.0], [69.1, 449.0], [69.2, 449.0], [69.3, 451.0], [69.4, 451.0], [69.5, 452.0], [69.6, 452.0], [69.7, 453.0], [69.8, 454.0], [69.9, 454.0], [70.0, 455.0], [70.1, 457.0], [70.2, 458.0], [70.3, 458.0], [70.4, 459.0], [70.5, 463.0], [70.6, 463.0], [70.7, 465.0], [70.8, 466.0], [70.9, 468.0], [71.0, 469.0], [71.1, 469.0], [71.2, 472.0], [71.3, 473.0], [71.4, 476.0], [71.5, 479.0], [71.6, 480.0], [71.7, 481.0], [71.8, 483.0], [71.9, 484.0], [72.0, 485.0], [72.1, 485.0], [72.2, 486.0], [72.3, 487.0], [72.4, 488.0], [72.5, 490.0], [72.6, 491.0], [72.7, 491.0], [72.8, 492.0], [72.9, 493.0], [73.0, 497.0], [73.1, 499.0], [73.2, 499.0], [73.3, 501.0], [73.4, 501.0], [73.5, 501.0], [73.6, 502.0], [73.7, 504.0], [73.8, 505.0], [73.9, 506.0], [74.0, 506.0], [74.1, 508.0], [74.2, 508.0], [74.3, 509.0], [74.4, 510.0], [74.5, 512.0], [74.6, 512.0], [74.7, 513.0], [74.8, 515.0], [74.9, 515.0], [75.0, 515.0], [75.1, 517.0], [75.2, 518.0], [75.3, 520.0], [75.4, 520.0], [75.5, 522.0], [75.6, 523.0], [75.7, 524.0], [75.8, 525.0], [75.9, 526.0], [76.0, 528.0], [76.1, 528.0], [76.2, 529.0], [76.3, 529.0], [76.4, 531.0], [76.5, 532.0], [76.6, 533.0], [76.7, 535.0], [76.8, 536.0], [76.9, 536.0], [77.0, 539.0], [77.1, 539.0], [77.2, 541.0], [77.3, 541.0], [77.4, 543.0], [77.5, 544.0], [77.6, 544.0], [77.7, 545.0], [77.8, 546.0], [77.9, 546.0], [78.0, 546.0], [78.1, 548.0], [78.2, 548.0], [78.3, 550.0], [78.4, 551.0], [78.5, 553.0], [78.6, 557.0], [78.7, 560.0], [78.8, 560.0], [78.9, 561.0], [79.0, 562.0], [79.1, 563.0], [79.2, 565.0], [79.3, 567.0], [79.4, 568.0], [79.5, 569.0], [79.6, 571.0], [79.7, 572.0], [79.8, 572.0], [79.9, 574.0], [80.0, 574.0], [80.1, 575.0], [80.2, 576.0], [80.3, 577.0], [80.4, 579.0], [80.5, 580.0], [80.6, 582.0], [80.7, 583.0], [80.8, 584.0], [80.9, 585.0], [81.0, 586.0], [81.1, 586.0], [81.2, 588.0], [81.3, 591.0], [81.4, 593.0], [81.5, 594.0], [81.6, 595.0], [81.7, 596.0], [81.8, 597.0], [81.9, 598.0], [82.0, 599.0], [82.1, 599.0], [82.2, 601.0], [82.3, 602.0], [82.4, 603.0], [82.5, 603.0], [82.6, 604.0], [82.7, 604.0], [82.8, 605.0], [82.9, 605.0], [83.0, 606.0], [83.1, 606.0], [83.2, 607.0], [83.3, 607.0], [83.4, 608.0], [83.5, 609.0], [83.6, 609.0], [83.7, 611.0], [83.8, 612.0], [83.9, 615.0], [84.0, 615.0], [84.1, 616.0], [84.2, 616.0], [84.3, 618.0], [84.4, 619.0], [84.5, 619.0], [84.6, 620.0], [84.7, 620.0], [84.8, 621.0], [84.9, 621.0], [85.0, 623.0], [85.1, 625.0], [85.2, 625.0], [85.3, 626.0], [85.4, 629.0], [85.5, 630.0], [85.6, 631.0], [85.7, 633.0], [85.8, 633.0], [85.9, 634.0], [86.0, 634.0], [86.1, 635.0], [86.2, 637.0], [86.3, 638.0], [86.4, 640.0], [86.5, 640.0], [86.6, 641.0], [86.7, 643.0], [86.8, 644.0], [86.9, 645.0], [87.0, 646.0], [87.1, 647.0], [87.2, 649.0], [87.3, 650.0], [87.4, 651.0], [87.5, 651.0], [87.6, 654.0], [87.7, 656.0], [87.8, 658.0], [87.9, 659.0], [88.0, 660.0], [88.1, 660.0], [88.2, 661.0], [88.3, 662.0], [88.4, 663.0], [88.5, 664.0], [88.6, 666.0], [88.7, 669.0], [88.8, 671.0], [88.9, 671.0], [89.0, 672.0], [89.1, 674.0], [89.2, 675.0], [89.3, 677.0], [89.4, 678.0], [89.5, 680.0], [89.6, 681.0], [89.7, 682.0], [89.8, 684.0], [89.9, 685.0], [90.0, 687.0], [90.1, 688.0], [90.2, 691.0], [90.3, 694.0], [90.4, 695.0], [90.5, 698.0], [90.6, 699.0], [90.7, 700.0], [90.8, 702.0], [90.9, 703.0], [91.0, 706.0], [91.1, 711.0], [91.2, 714.0], [91.3, 714.0], [91.4, 714.0], [91.5, 717.0], [91.6, 717.0], [91.7, 719.0], [91.8, 722.0], [91.9, 723.0], [92.0, 724.0], [92.1, 725.0], [92.2, 730.0], [92.3, 738.0], [92.4, 739.0], [92.5, 740.0], [92.6, 741.0], [92.7, 741.0], [92.8, 744.0], [92.9, 750.0], [93.0, 755.0], [93.1, 761.0], [93.2, 763.0], [93.3, 764.0], [93.4, 766.0], [93.5, 771.0], [93.6, 773.0], [93.7, 779.0], [93.8, 781.0], [93.9, 786.0], [94.0, 791.0], [94.1, 796.0], [94.2, 797.0], [94.3, 804.0], [94.4, 808.0], [94.5, 811.0], [94.6, 815.0], [94.7, 833.0], [94.8, 835.0], [94.9, 842.0], [95.0, 842.0], [95.1, 846.0], [95.2, 848.0], [95.3, 849.0], [95.4, 852.0], [95.5, 854.0], [95.6, 858.0], [95.7, 861.0], [95.8, 862.0], [95.9, 870.0], [96.0, 871.0], [96.1, 872.0], [96.2, 879.0], [96.3, 881.0], [96.4, 886.0], [96.5, 910.0], [96.6, 911.0], [96.7, 916.0], [96.8, 923.0], [96.9, 946.0], [97.0, 997.0], [97.1, 1015.0], [97.2, 1022.0], [97.3, 1053.0], [97.4, 1071.0], [97.5, 1077.0], [97.6, 1077.0], [97.7, 1079.0], [97.8, 1092.0], [97.9, 1112.0], [98.0, 1138.0], [98.1, 1175.0], [98.2, 1193.0], [98.3, 1236.0], [98.4, 1300.0], [98.5, 1307.0], [98.6, 1335.0], [98.7, 1357.0], [98.8, 1421.0], [98.9, 1472.0], [99.0, 1598.0], [99.1, 1603.0], [99.2, 1654.0], [99.3, 1682.0], [99.4, 1701.0], [99.5, 1734.0], [99.6, 1778.0], [99.7, 1807.0], [99.8, 2425.0], [99.9, 13852.0]], "isOverall": false, "label": "login request-1", "isController": false}, {"data": [[0.0, 250.0], [0.1, 251.0], [0.2, 251.0], [0.3, 251.0], [0.4, 252.0], [0.5, 252.0], [0.6, 252.0], [0.7, 252.0], [0.8, 252.0], [0.9, 252.0], [1.0, 253.0], [1.1, 253.0], [1.2, 253.0], [1.3, 253.0], [1.4, 253.0], [1.5, 253.0], [1.6, 253.0], [1.7, 253.0], [1.8, 253.0], [1.9, 253.0], [2.0, 253.0], [2.1, 254.0], [2.2, 254.0], [2.3, 254.0], [2.4, 254.0], [2.5, 254.0], [2.6, 254.0], [2.7, 254.0], [2.8, 254.0], [2.9, 254.0], [3.0, 254.0], [3.1, 254.0], [3.2, 254.0], [3.3, 254.0], [3.4, 254.0], [3.5, 254.0], [3.6, 254.0], [3.7, 254.0], [3.8, 255.0], [3.9, 255.0], [4.0, 255.0], [4.1, 255.0], [4.2, 255.0], [4.3, 255.0], [4.4, 255.0], [4.5, 255.0], [4.6, 255.0], [4.7, 255.0], [4.8, 255.0], [4.9, 255.0], [5.0, 255.0], [5.1, 255.0], [5.2, 255.0], [5.3, 255.0], [5.4, 255.0], [5.5, 255.0], [5.6, 255.0], [5.7, 255.0], [5.8, 255.0], [5.9, 255.0], [6.0, 255.0], [6.1, 255.0], [6.2, 255.0], [6.3, 255.0], [6.4, 256.0], [6.5, 256.0], [6.6, 256.0], [6.7, 256.0], [6.8, 256.0], [6.9, 256.0], [7.0, 256.0], [7.1, 256.0], [7.2, 256.0], [7.3, 256.0], [7.4, 256.0], [7.5, 256.0], [7.6, 256.0], [7.7, 256.0], [7.8, 256.0], [7.9, 256.0], [8.0, 256.0], [8.1, 256.0], [8.2, 256.0], [8.3, 256.0], [8.4, 256.0], [8.5, 256.0], [8.6, 256.0], [8.7, 256.0], [8.8, 256.0], [8.9, 256.0], [9.0, 256.0], [9.1, 256.0], [9.2, 256.0], [9.3, 256.0], [9.4, 256.0], [9.5, 256.0], [9.6, 256.0], [9.7, 256.0], [9.8, 256.0], [9.9, 256.0], [10.0, 256.0], [10.1, 256.0], [10.2, 257.0], [10.3, 257.0], [10.4, 257.0], [10.5, 257.0], [10.6, 257.0], [10.7, 257.0], [10.8, 257.0], [10.9, 257.0], [11.0, 257.0], [11.1, 257.0], [11.2, 257.0], [11.3, 257.0], [11.4, 257.0], [11.5, 257.0], [11.6, 257.0], [11.7, 257.0], [11.8, 257.0], [11.9, 257.0], [12.0, 257.0], [12.1, 257.0], [12.2, 257.0], [12.3, 257.0], [12.4, 257.0], [12.5, 257.0], [12.6, 257.0], [12.7, 257.0], [12.8, 257.0], [12.9, 257.0], [13.0, 257.0], [13.1, 257.0], [13.2, 258.0], [13.3, 258.0], [13.4, 258.0], [13.5, 258.0], [13.6, 258.0], [13.7, 258.0], [13.8, 258.0], [13.9, 258.0], [14.0, 258.0], [14.1, 258.0], [14.2, 258.0], [14.3, 258.0], [14.4, 258.0], [14.5, 258.0], [14.6, 258.0], [14.7, 258.0], [14.8, 258.0], [14.9, 258.0], [15.0, 258.0], [15.1, 258.0], [15.2, 258.0], [15.3, 258.0], [15.4, 258.0], [15.5, 258.0], [15.6, 258.0], [15.7, 258.0], [15.8, 258.0], [15.9, 258.0], [16.0, 258.0], [16.1, 258.0], [16.2, 258.0], [16.3, 258.0], [16.4, 258.0], [16.5, 259.0], [16.6, 259.0], [16.7, 259.0], [16.8, 259.0], [16.9, 259.0], [17.0, 259.0], [17.1, 259.0], [17.2, 259.0], [17.3, 259.0], [17.4, 259.0], [17.5, 259.0], [17.6, 259.0], [17.7, 259.0], [17.8, 259.0], [17.9, 259.0], [18.0, 259.0], [18.1, 259.0], [18.2, 259.0], [18.3, 259.0], [18.4, 259.0], [18.5, 260.0], [18.6, 260.0], [18.7, 260.0], [18.8, 260.0], [18.9, 260.0], [19.0, 260.0], [19.1, 260.0], [19.2, 260.0], [19.3, 260.0], [19.4, 260.0], [19.5, 260.0], [19.6, 260.0], [19.7, 260.0], [19.8, 260.0], [19.9, 260.0], [20.0, 260.0], [20.1, 260.0], [20.2, 260.0], [20.3, 260.0], [20.4, 261.0], [20.5, 261.0], [20.6, 261.0], [20.7, 261.0], [20.8, 261.0], [20.9, 261.0], [21.0, 261.0], [21.1, 261.0], [21.2, 261.0], [21.3, 261.0], [21.4, 261.0], [21.5, 261.0], [21.6, 261.0], [21.7, 261.0], [21.8, 261.0], [21.9, 261.0], [22.0, 261.0], [22.1, 261.0], [22.2, 261.0], [22.3, 261.0], [22.4, 262.0], [22.5, 262.0], [22.6, 262.0], [22.7, 262.0], [22.8, 262.0], [22.9, 262.0], [23.0, 262.0], [23.1, 262.0], [23.2, 262.0], [23.3, 262.0], [23.4, 263.0], [23.5, 263.0], [23.6, 263.0], [23.7, 263.0], [23.8, 263.0], [23.9, 263.0], [24.0, 263.0], [24.1, 263.0], [24.2, 263.0], [24.3, 263.0], [24.4, 263.0], [24.5, 263.0], [24.6, 263.0], [24.7, 263.0], [24.8, 263.0], [24.9, 263.0], [25.0, 264.0], [25.1, 264.0], [25.2, 264.0], [25.3, 264.0], [25.4, 264.0], [25.5, 264.0], [25.6, 264.0], [25.7, 264.0], [25.8, 265.0], [25.9, 265.0], [26.0, 265.0], [26.1, 265.0], [26.2, 265.0], [26.3, 265.0], [26.4, 265.0], [26.5, 266.0], [26.6, 266.0], [26.7, 266.0], [26.8, 266.0], [26.9, 266.0], [27.0, 266.0], [27.1, 267.0], [27.2, 267.0], [27.3, 267.0], [27.4, 267.0], [27.5, 267.0], [27.6, 267.0], [27.7, 267.0], [27.8, 267.0], [27.9, 267.0], [28.0, 268.0], [28.1, 268.0], [28.2, 268.0], [28.3, 268.0], [28.4, 268.0], [28.5, 268.0], [28.6, 269.0], [28.7, 269.0], [28.8, 269.0], [28.9, 269.0], [29.0, 269.0], [29.1, 269.0], [29.2, 269.0], [29.3, 269.0], [29.4, 269.0], [29.5, 270.0], [29.6, 270.0], [29.7, 270.0], [29.8, 270.0], [29.9, 270.0], [30.0, 271.0], [30.1, 271.0], [30.2, 271.0], [30.3, 271.0], [30.4, 271.0], [30.5, 271.0], [30.6, 271.0], [30.7, 271.0], [30.8, 272.0], [30.9, 272.0], [31.0, 272.0], [31.1, 273.0], [31.2, 273.0], [31.3, 273.0], [31.4, 273.0], [31.5, 273.0], [31.6, 273.0], [31.7, 274.0], [31.8, 274.0], [31.9, 274.0], [32.0, 275.0], [32.1, 275.0], [32.2, 275.0], [32.3, 275.0], [32.4, 275.0], [32.5, 276.0], [32.6, 276.0], [32.7, 277.0], [32.8, 277.0], [32.9, 277.0], [33.0, 277.0], [33.1, 278.0], [33.2, 278.0], [33.3, 278.0], [33.4, 279.0], [33.5, 279.0], [33.6, 280.0], [33.7, 280.0], [33.8, 280.0], [33.9, 280.0], [34.0, 281.0], [34.1, 281.0], [34.2, 281.0], [34.3, 281.0], [34.4, 282.0], [34.5, 282.0], [34.6, 282.0], [34.7, 283.0], [34.8, 283.0], [34.9, 283.0], [35.0, 285.0], [35.1, 285.0], [35.2, 286.0], [35.3, 286.0], [35.4, 287.0], [35.5, 288.0], [35.6, 289.0], [35.7, 289.0], [35.8, 289.0], [35.9, 290.0], [36.0, 292.0], [36.1, 292.0], [36.2, 294.0], [36.3, 295.0], [36.4, 296.0], [36.5, 297.0], [36.6, 299.0], [36.7, 301.0], [36.8, 302.0], [36.9, 303.0], [37.0, 303.0], [37.1, 305.0], [37.2, 306.0], [37.3, 309.0], [37.4, 309.0], [37.5, 312.0], [37.6, 312.0], [37.7, 314.0], [37.8, 314.0], [37.9, 315.0], [38.0, 316.0], [38.1, 316.0], [38.2, 317.0], [38.3, 319.0], [38.4, 319.0], [38.5, 320.0], [38.6, 321.0], [38.7, 322.0], [38.8, 323.0], [38.9, 324.0], [39.0, 324.0], [39.1, 324.0], [39.2, 324.0], [39.3, 325.0], [39.4, 325.0], [39.5, 326.0], [39.6, 326.0], [39.7, 326.0], [39.8, 326.0], [39.9, 327.0], [40.0, 328.0], [40.1, 328.0], [40.2, 328.0], [40.3, 329.0], [40.4, 329.0], [40.5, 330.0], [40.6, 330.0], [40.7, 331.0], [40.8, 331.0], [40.9, 332.0], [41.0, 332.0], [41.1, 332.0], [41.2, 332.0], [41.3, 333.0], [41.4, 333.0], [41.5, 334.0], [41.6, 334.0], [41.7, 334.0], [41.8, 334.0], [41.9, 335.0], [42.0, 335.0], [42.1, 336.0], [42.2, 336.0], [42.3, 336.0], [42.4, 336.0], [42.5, 337.0], [42.6, 337.0], [42.7, 337.0], [42.8, 337.0], [42.9, 338.0], [43.0, 338.0], [43.1, 339.0], [43.2, 339.0], [43.3, 339.0], [43.4, 339.0], [43.5, 340.0], [43.6, 340.0], [43.7, 340.0], [43.8, 340.0], [43.9, 341.0], [44.0, 341.0], [44.1, 341.0], [44.2, 342.0], [44.3, 342.0], [44.4, 343.0], [44.5, 343.0], [44.6, 344.0], [44.7, 344.0], [44.8, 344.0], [44.9, 345.0], [45.0, 345.0], [45.1, 345.0], [45.2, 345.0], [45.3, 345.0], [45.4, 345.0], [45.5, 346.0], [45.6, 347.0], [45.7, 347.0], [45.8, 348.0], [45.9, 348.0], [46.0, 348.0], [46.1, 348.0], [46.2, 348.0], [46.3, 349.0], [46.4, 349.0], [46.5, 350.0], [46.6, 350.0], [46.7, 350.0], [46.8, 350.0], [46.9, 350.0], [47.0, 351.0], [47.1, 351.0], [47.2, 351.0], [47.3, 352.0], [47.4, 352.0], [47.5, 353.0], [47.6, 353.0], [47.7, 353.0], [47.8, 353.0], [47.9, 354.0], [48.0, 354.0], [48.1, 354.0], [48.2, 355.0], [48.3, 355.0], [48.4, 355.0], [48.5, 356.0], [48.6, 356.0], [48.7, 356.0], [48.8, 356.0], [48.9, 357.0], [49.0, 358.0], [49.1, 358.0], [49.2, 359.0], [49.3, 359.0], [49.4, 359.0], [49.5, 359.0], [49.6, 359.0], [49.7, 360.0], [49.8, 360.0], [49.9, 360.0], [50.0, 360.0], [50.1, 360.0], [50.2, 361.0], [50.3, 361.0], [50.4, 361.0], [50.5, 361.0], [50.6, 362.0], [50.7, 362.0], [50.8, 362.0], [50.9, 363.0], [51.0, 363.0], [51.1, 364.0], [51.2, 364.0], [51.3, 365.0], [51.4, 365.0], [51.5, 365.0], [51.6, 365.0], [51.7, 366.0], [51.8, 366.0], [51.9, 366.0], [52.0, 366.0], [52.1, 367.0], [52.2, 368.0], [52.3, 369.0], [52.4, 369.0], [52.5, 369.0], [52.6, 370.0], [52.7, 370.0], [52.8, 371.0], [52.9, 371.0], [53.0, 371.0], [53.1, 371.0], [53.2, 372.0], [53.3, 372.0], [53.4, 372.0], [53.5, 372.0], [53.6, 372.0], [53.7, 373.0], [53.8, 373.0], [53.9, 373.0], [54.0, 374.0], [54.1, 374.0], [54.2, 374.0], [54.3, 375.0], [54.4, 375.0], [54.5, 375.0], [54.6, 376.0], [54.7, 377.0], [54.8, 377.0], [54.9, 377.0], [55.0, 378.0], [55.1, 378.0], [55.2, 378.0], [55.3, 379.0], [55.4, 379.0], [55.5, 379.0], [55.6, 380.0], [55.7, 380.0], [55.8, 380.0], [55.9, 381.0], [56.0, 382.0], [56.1, 382.0], [56.2, 383.0], [56.3, 383.0], [56.4, 383.0], [56.5, 383.0], [56.6, 384.0], [56.7, 384.0], [56.8, 384.0], [56.9, 385.0], [57.0, 385.0], [57.1, 387.0], [57.2, 387.0], [57.3, 387.0], [57.4, 388.0], [57.5, 388.0], [57.6, 389.0], [57.7, 389.0], [57.8, 389.0], [57.9, 389.0], [58.0, 391.0], [58.1, 391.0], [58.2, 391.0], [58.3, 393.0], [58.4, 393.0], [58.5, 393.0], [58.6, 394.0], [58.7, 394.0], [58.8, 394.0], [58.9, 395.0], [59.0, 395.0], [59.1, 397.0], [59.2, 397.0], [59.3, 398.0], [59.4, 398.0], [59.5, 398.0], [59.6, 399.0], [59.7, 399.0], [59.8, 400.0], [59.9, 400.0], [60.0, 401.0], [60.1, 401.0], [60.2, 402.0], [60.3, 402.0], [60.4, 402.0], [60.5, 403.0], [60.6, 403.0], [60.7, 405.0], [60.8, 405.0], [60.9, 405.0], [61.0, 406.0], [61.1, 407.0], [61.2, 407.0], [61.3, 407.0], [61.4, 408.0], [61.5, 409.0], [61.6, 409.0], [61.7, 409.0], [61.8, 410.0], [61.9, 410.0], [62.0, 410.0], [62.1, 411.0], [62.2, 412.0], [62.3, 412.0], [62.4, 413.0], [62.5, 414.0], [62.6, 414.0], [62.7, 415.0], [62.8, 415.0], [62.9, 416.0], [63.0, 417.0], [63.1, 418.0], [63.2, 419.0], [63.3, 419.0], [63.4, 419.0], [63.5, 419.0], [63.6, 420.0], [63.7, 420.0], [63.8, 421.0], [63.9, 422.0], [64.0, 423.0], [64.1, 423.0], [64.2, 424.0], [64.3, 424.0], [64.4, 424.0], [64.5, 425.0], [64.6, 425.0], [64.7, 426.0], [64.8, 426.0], [64.9, 427.0], [65.0, 428.0], [65.1, 429.0], [65.2, 429.0], [65.3, 430.0], [65.4, 431.0], [65.5, 431.0], [65.6, 432.0], [65.7, 432.0], [65.8, 432.0], [65.9, 433.0], [66.0, 433.0], [66.1, 434.0], [66.2, 434.0], [66.3, 435.0], [66.4, 435.0], [66.5, 435.0], [66.6, 437.0], [66.7, 438.0], [66.8, 438.0], [66.9, 439.0], [67.0, 440.0], [67.1, 441.0], [67.2, 441.0], [67.3, 442.0], [67.4, 444.0], [67.5, 445.0], [67.6, 447.0], [67.7, 447.0], [67.8, 448.0], [67.9, 449.0], [68.0, 450.0], [68.1, 450.0], [68.2, 453.0], [68.3, 454.0], [68.4, 454.0], [68.5, 456.0], [68.6, 457.0], [68.7, 458.0], [68.8, 458.0], [68.9, 458.0], [69.0, 459.0], [69.1, 459.0], [69.2, 460.0], [69.3, 461.0], [69.4, 461.0], [69.5, 461.0], [69.6, 464.0], [69.7, 464.0], [69.8, 465.0], [69.9, 466.0], [70.0, 466.0], [70.1, 467.0], [70.2, 469.0], [70.3, 470.0], [70.4, 470.0], [70.5, 470.0], [70.6, 472.0], [70.7, 474.0], [70.8, 477.0], [70.9, 477.0], [71.0, 477.0], [71.1, 478.0], [71.2, 479.0], [71.3, 480.0], [71.4, 480.0], [71.5, 481.0], [71.6, 482.0], [71.7, 483.0], [71.8, 483.0], [71.9, 484.0], [72.0, 485.0], [72.1, 486.0], [72.2, 486.0], [72.3, 488.0], [72.4, 490.0], [72.5, 491.0], [72.6, 491.0], [72.7, 491.0], [72.8, 493.0], [72.9, 494.0], [73.0, 496.0], [73.1, 497.0], [73.2, 497.0], [73.3, 498.0], [73.4, 498.0], [73.5, 499.0], [73.6, 499.0], [73.7, 500.0], [73.8, 500.0], [73.9, 502.0], [74.0, 504.0], [74.1, 505.0], [74.2, 505.0], [74.3, 506.0], [74.4, 507.0], [74.5, 507.0], [74.6, 508.0], [74.7, 510.0], [74.8, 512.0], [74.9, 514.0], [75.0, 515.0], [75.1, 517.0], [75.2, 518.0], [75.3, 519.0], [75.4, 521.0], [75.5, 522.0], [75.6, 523.0], [75.7, 525.0], [75.8, 526.0], [75.9, 527.0], [76.0, 527.0], [76.1, 530.0], [76.2, 531.0], [76.3, 531.0], [76.4, 532.0], [76.5, 535.0], [76.6, 536.0], [76.7, 538.0], [76.8, 538.0], [76.9, 539.0], [77.0, 542.0], [77.1, 542.0], [77.2, 544.0], [77.3, 546.0], [77.4, 546.0], [77.5, 547.0], [77.6, 547.0], [77.7, 549.0], [77.8, 550.0], [77.9, 551.0], [78.0, 552.0], [78.1, 553.0], [78.2, 554.0], [78.3, 554.0], [78.4, 555.0], [78.5, 555.0], [78.6, 556.0], [78.7, 558.0], [78.8, 559.0], [78.9, 559.0], [79.0, 559.0], [79.1, 561.0], [79.2, 562.0], [79.3, 563.0], [79.4, 563.0], [79.5, 564.0], [79.6, 566.0], [79.7, 567.0], [79.8, 567.0], [79.9, 570.0], [80.0, 571.0], [80.1, 572.0], [80.2, 573.0], [80.3, 574.0], [80.4, 574.0], [80.5, 577.0], [80.6, 578.0], [80.7, 580.0], [80.8, 582.0], [80.9, 583.0], [81.0, 583.0], [81.1, 585.0], [81.2, 586.0], [81.3, 586.0], [81.4, 587.0], [81.5, 588.0], [81.6, 589.0], [81.7, 590.0], [81.8, 591.0], [81.9, 592.0], [82.0, 593.0], [82.1, 594.0], [82.2, 595.0], [82.3, 595.0], [82.4, 598.0], [82.5, 599.0], [82.6, 599.0], [82.7, 600.0], [82.8, 602.0], [82.9, 602.0], [83.0, 603.0], [83.1, 603.0], [83.2, 603.0], [83.3, 604.0], [83.4, 605.0], [83.5, 608.0], [83.6, 608.0], [83.7, 609.0], [83.8, 609.0], [83.9, 611.0], [84.0, 612.0], [84.1, 614.0], [84.2, 615.0], [84.3, 616.0], [84.4, 618.0], [84.5, 620.0], [84.6, 620.0], [84.7, 621.0], [84.8, 621.0], [84.9, 623.0], [85.0, 624.0], [85.1, 625.0], [85.2, 625.0], [85.3, 627.0], [85.4, 628.0], [85.5, 628.0], [85.6, 629.0], [85.7, 629.0], [85.8, 630.0], [85.9, 631.0], [86.0, 634.0], [86.1, 634.0], [86.2, 635.0], [86.3, 635.0], [86.4, 636.0], [86.5, 637.0], [86.6, 638.0], [86.7, 638.0], [86.8, 639.0], [86.9, 640.0], [87.0, 640.0], [87.1, 641.0], [87.2, 641.0], [87.3, 641.0], [87.4, 642.0], [87.5, 645.0], [87.6, 645.0], [87.7, 647.0], [87.8, 649.0], [87.9, 650.0], [88.0, 651.0], [88.1, 653.0], [88.2, 653.0], [88.3, 654.0], [88.4, 655.0], [88.5, 657.0], [88.6, 658.0], [88.7, 659.0], [88.8, 663.0], [88.9, 663.0], [89.0, 666.0], [89.1, 669.0], [89.2, 669.0], [89.3, 670.0], [89.4, 671.0], [89.5, 673.0], [89.6, 674.0], [89.7, 676.0], [89.8, 682.0], [89.9, 683.0], [90.0, 685.0], [90.1, 689.0], [90.2, 690.0], [90.3, 691.0], [90.4, 693.0], [90.5, 695.0], [90.6, 698.0], [90.7, 699.0], [90.8, 700.0], [90.9, 702.0], [91.0, 705.0], [91.1, 707.0], [91.2, 710.0], [91.3, 711.0], [91.4, 714.0], [91.5, 715.0], [91.6, 717.0], [91.7, 720.0], [91.8, 724.0], [91.9, 731.0], [92.0, 734.0], [92.1, 740.0], [92.2, 743.0], [92.3, 745.0], [92.4, 754.0], [92.5, 756.0], [92.6, 761.0], [92.7, 762.0], [92.8, 768.0], [92.9, 770.0], [93.0, 774.0], [93.1, 776.0], [93.2, 778.0], [93.3, 788.0], [93.4, 792.0], [93.5, 796.0], [93.6, 798.0], [93.7, 800.0], [93.8, 803.0], [93.9, 804.0], [94.0, 806.0], [94.1, 816.0], [94.2, 818.0], [94.3, 828.0], [94.4, 831.0], [94.5, 833.0], [94.6, 835.0], [94.7, 837.0], [94.8, 838.0], [94.9, 846.0], [95.0, 852.0], [95.1, 854.0], [95.2, 864.0], [95.3, 866.0], [95.4, 869.0], [95.5, 874.0], [95.6, 878.0], [95.7, 879.0], [95.8, 881.0], [95.9, 885.0], [96.0, 888.0], [96.1, 893.0], [96.2, 895.0], [96.3, 899.0], [96.4, 914.0], [96.5, 930.0], [96.6, 953.0], [96.7, 966.0], [96.8, 984.0], [96.9, 998.0], [97.0, 1008.0], [97.1, 1038.0], [97.2, 1060.0], [97.3, 1079.0], [97.4, 1088.0], [97.5, 1105.0], [97.6, 1118.0], [97.7, 1165.0], [97.8, 1194.0], [97.9, 1201.0], [98.0, 1239.0], [98.1, 1318.0], [98.2, 1389.0], [98.3, 1409.0], [98.4, 1422.0], [98.5, 1435.0], [98.6, 1463.0], [98.7, 1470.0], [98.8, 1487.0], [98.9, 1530.0], [99.0, 1541.0], [99.1, 1550.0], [99.2, 1571.0], [99.3, 1598.0], [99.4, 1622.0], [99.5, 1673.0], [99.6, 1685.0], [99.7, 1807.0], [99.8, 1873.0], [99.9, 24501.0]], "isOverall": false, "label": "login request-0", "isController": false}, {"data": [[0.0, 503.0], [0.1, 505.0], [0.2, 506.0], [0.3, 507.0], [0.4, 507.0], [0.5, 508.0], [0.6, 508.0], [0.7, 508.0], [0.8, 508.0], [0.9, 509.0], [1.0, 509.0], [1.1, 509.0], [1.2, 509.0], [1.3, 509.0], [1.4, 510.0], [1.5, 510.0], [1.6, 510.0], [1.7, 510.0], [1.8, 510.0], [1.9, 510.0], [2.0, 510.0], [2.1, 510.0], [2.2, 510.0], [2.3, 510.0], [2.4, 510.0], [2.5, 511.0], [2.6, 511.0], [2.7, 511.0], [2.8, 511.0], [2.9, 511.0], [3.0, 511.0], [3.1, 511.0], [3.2, 511.0], [3.3, 511.0], [3.4, 511.0], [3.5, 511.0], [3.6, 511.0], [3.7, 512.0], [3.8, 512.0], [3.9, 512.0], [4.0, 512.0], [4.1, 512.0], [4.2, 512.0], [4.3, 512.0], [4.4, 512.0], [4.5, 512.0], [4.6, 512.0], [4.7, 512.0], [4.8, 512.0], [4.9, 513.0], [5.0, 513.0], [5.1, 513.0], [5.2, 513.0], [5.3, 513.0], [5.4, 513.0], [5.5, 513.0], [5.6, 513.0], [5.7, 513.0], [5.8, 513.0], [5.9, 513.0], [6.0, 513.0], [6.1, 513.0], [6.2, 513.0], [6.3, 513.0], [6.4, 514.0], [6.5, 514.0], [6.6, 514.0], [6.7, 514.0], [6.8, 514.0], [6.9, 514.0], [7.0, 514.0], [7.1, 514.0], [7.2, 514.0], [7.3, 514.0], [7.4, 514.0], [7.5, 514.0], [7.6, 514.0], [7.7, 514.0], [7.8, 514.0], [7.9, 514.0], [8.0, 515.0], [8.1, 515.0], [8.2, 515.0], [8.3, 515.0], [8.4, 515.0], [8.5, 515.0], [8.6, 515.0], [8.7, 515.0], [8.8, 515.0], [8.9, 515.0], [9.0, 515.0], [9.1, 515.0], [9.2, 515.0], [9.3, 515.0], [9.4, 515.0], [9.5, 516.0], [9.6, 516.0], [9.7, 516.0], [9.8, 516.0], [9.9, 516.0], [10.0, 516.0], [10.1, 516.0], [10.2, 516.0], [10.3, 516.0], [10.4, 516.0], [10.5, 516.0], [10.6, 516.0], [10.7, 516.0], [10.8, 516.0], [10.9, 516.0], [11.0, 516.0], [11.1, 516.0], [11.2, 516.0], [11.3, 516.0], [11.4, 517.0], [11.5, 517.0], [11.6, 517.0], [11.7, 517.0], [11.8, 517.0], [11.9, 517.0], [12.0, 517.0], [12.1, 517.0], [12.2, 517.0], [12.3, 517.0], [12.4, 517.0], [12.5, 517.0], [12.6, 517.0], [12.7, 518.0], [12.8, 518.0], [12.9, 518.0], [13.0, 518.0], [13.1, 518.0], [13.2, 518.0], [13.3, 518.0], [13.4, 518.0], [13.5, 518.0], [13.6, 518.0], [13.7, 518.0], [13.8, 518.0], [13.9, 518.0], [14.0, 518.0], [14.1, 519.0], [14.2, 519.0], [14.3, 519.0], [14.4, 519.0], [14.5, 519.0], [14.6, 519.0], [14.7, 519.0], [14.8, 519.0], [14.9, 519.0], [15.0, 519.0], [15.1, 519.0], [15.2, 520.0], [15.3, 520.0], [15.4, 520.0], [15.5, 520.0], [15.6, 520.0], [15.7, 520.0], [15.8, 520.0], [15.9, 520.0], [16.0, 520.0], [16.1, 520.0], [16.2, 520.0], [16.3, 520.0], [16.4, 520.0], [16.5, 521.0], [16.6, 521.0], [16.7, 521.0], [16.8, 521.0], [16.9, 521.0], [17.0, 521.0], [17.1, 521.0], [17.2, 521.0], [17.3, 522.0], [17.4, 522.0], [17.5, 522.0], [17.6, 522.0], [17.7, 522.0], [17.8, 522.0], [17.9, 522.0], [18.0, 522.0], [18.1, 522.0], [18.2, 523.0], [18.3, 523.0], [18.4, 523.0], [18.5, 523.0], [18.6, 523.0], [18.7, 523.0], [18.8, 523.0], [18.9, 523.0], [19.0, 523.0], [19.1, 523.0], [19.2, 524.0], [19.3, 524.0], [19.4, 524.0], [19.5, 524.0], [19.6, 524.0], [19.7, 524.0], [19.8, 524.0], [19.9, 525.0], [20.0, 525.0], [20.1, 525.0], [20.2, 525.0], [20.3, 525.0], [20.4, 525.0], [20.5, 525.0], [20.6, 525.0], [20.7, 526.0], [20.8, 526.0], [20.9, 526.0], [21.0, 526.0], [21.1, 526.0], [21.2, 526.0], [21.3, 526.0], [21.4, 526.0], [21.5, 526.0], [21.6, 527.0], [21.7, 527.0], [21.8, 527.0], [21.9, 527.0], [22.0, 527.0], [22.1, 527.0], [22.2, 527.0], [22.3, 527.0], [22.4, 527.0], [22.5, 528.0], [22.6, 528.0], [22.7, 528.0], [22.8, 528.0], [22.9, 528.0], [23.0, 528.0], [23.1, 529.0], [23.2, 529.0], [23.3, 529.0], [23.4, 529.0], [23.5, 529.0], [23.6, 529.0], [23.7, 529.0], [23.8, 529.0], [23.9, 530.0], [24.0, 530.0], [24.1, 530.0], [24.2, 530.0], [24.3, 530.0], [24.4, 530.0], [24.5, 531.0], [24.6, 531.0], [24.7, 531.0], [24.8, 531.0], [24.9, 531.0], [25.0, 532.0], [25.1, 532.0], [25.2, 532.0], [25.3, 532.0], [25.4, 532.0], [25.5, 532.0], [25.6, 532.0], [25.7, 532.0], [25.8, 532.0], [25.9, 533.0], [26.0, 533.0], [26.1, 533.0], [26.2, 533.0], [26.3, 533.0], [26.4, 533.0], [26.5, 534.0], [26.6, 534.0], [26.7, 534.0], [26.8, 534.0], [26.9, 534.0], [27.0, 534.0], [27.1, 535.0], [27.2, 535.0], [27.3, 535.0], [27.4, 535.0], [27.5, 535.0], [27.6, 535.0], [27.7, 536.0], [27.8, 536.0], [27.9, 536.0], [28.0, 536.0], [28.1, 536.0], [28.2, 537.0], [28.3, 537.0], [28.4, 537.0], [28.5, 537.0], [28.6, 538.0], [28.7, 538.0], [28.8, 539.0], [28.9, 539.0], [29.0, 539.0], [29.1, 539.0], [29.2, 539.0], [29.3, 540.0], [29.4, 540.0], [29.5, 540.0], [29.6, 541.0], [29.7, 541.0], [29.8, 541.0], [29.9, 541.0], [30.0, 542.0], [30.1, 542.0], [30.2, 543.0], [30.3, 543.0], [30.4, 543.0], [30.5, 544.0], [30.6, 544.0], [30.7, 544.0], [30.8, 545.0], [30.9, 545.0], [31.0, 546.0], [31.1, 546.0], [31.2, 547.0], [31.3, 547.0], [31.4, 547.0], [31.5, 547.0], [31.6, 548.0], [31.7, 548.0], [31.8, 548.0], [31.9, 548.0], [32.0, 549.0], [32.1, 549.0], [32.2, 551.0], [32.3, 551.0], [32.4, 552.0], [32.5, 552.0], [32.6, 554.0], [32.7, 555.0], [32.8, 556.0], [32.9, 557.0], [33.0, 558.0], [33.1, 559.0], [33.2, 560.0], [33.3, 560.0], [33.4, 562.0], [33.5, 562.0], [33.6, 563.0], [33.7, 564.0], [33.8, 564.0], [33.9, 567.0], [34.0, 568.0], [34.1, 568.0], [34.2, 569.0], [34.3, 570.0], [34.4, 572.0], [34.5, 572.0], [34.6, 574.0], [34.7, 574.0], [34.8, 576.0], [34.9, 577.0], [35.0, 578.0], [35.1, 579.0], [35.2, 579.0], [35.3, 579.0], [35.4, 580.0], [35.5, 581.0], [35.6, 581.0], [35.7, 582.0], [35.8, 582.0], [35.9, 583.0], [36.0, 584.0], [36.1, 584.0], [36.2, 585.0], [36.3, 585.0], [36.4, 587.0], [36.5, 588.0], [36.6, 591.0], [36.7, 592.0], [36.8, 592.0], [36.9, 594.0], [37.0, 595.0], [37.1, 597.0], [37.2, 598.0], [37.3, 598.0], [37.4, 600.0], [37.5, 602.0], [37.6, 603.0], [37.7, 605.0], [37.8, 606.0], [37.9, 608.0], [38.0, 610.0], [38.1, 612.0], [38.2, 613.0], [38.3, 616.0], [38.4, 617.0], [38.5, 617.0], [38.6, 619.0], [38.7, 622.0], [38.8, 625.0], [38.9, 629.0], [39.0, 630.0], [39.1, 631.0], [39.2, 633.0], [39.3, 636.0], [39.4, 638.0], [39.5, 639.0], [39.6, 639.0], [39.7, 642.0], [39.8, 645.0], [39.9, 647.0], [40.0, 648.0], [40.1, 649.0], [40.2, 651.0], [40.3, 651.0], [40.4, 653.0], [40.5, 655.0], [40.6, 657.0], [40.7, 658.0], [40.8, 660.0], [40.9, 660.0], [41.0, 661.0], [41.1, 663.0], [41.2, 664.0], [41.3, 664.0], [41.4, 665.0], [41.5, 666.0], [41.6, 667.0], [41.7, 668.0], [41.8, 669.0], [41.9, 671.0], [42.0, 671.0], [42.1, 672.0], [42.2, 673.0], [42.3, 673.0], [42.4, 673.0], [42.5, 673.0], [42.6, 676.0], [42.7, 677.0], [42.8, 678.0], [42.9, 678.0], [43.0, 679.0], [43.1, 680.0], [43.2, 681.0], [43.3, 682.0], [43.4, 683.0], [43.5, 684.0], [43.6, 685.0], [43.7, 686.0], [43.8, 687.0], [43.9, 687.0], [44.0, 688.0], [44.1, 688.0], [44.2, 688.0], [44.3, 689.0], [44.4, 689.0], [44.5, 690.0], [44.6, 692.0], [44.7, 694.0], [44.8, 694.0], [44.9, 695.0], [45.0, 695.0], [45.1, 695.0], [45.2, 697.0], [45.3, 697.0], [45.4, 698.0], [45.5, 698.0], [45.6, 699.0], [45.7, 699.0], [45.8, 702.0], [45.9, 703.0], [46.0, 704.0], [46.1, 705.0], [46.2, 705.0], [46.3, 706.0], [46.4, 707.0], [46.5, 708.0], [46.6, 709.0], [46.7, 709.0], [46.8, 710.0], [46.9, 710.0], [47.0, 710.0], [47.1, 710.0], [47.2, 711.0], [47.3, 711.0], [47.4, 712.0], [47.5, 713.0], [47.6, 713.0], [47.7, 714.0], [47.8, 715.0], [47.9, 715.0], [48.0, 716.0], [48.1, 717.0], [48.2, 717.0], [48.3, 718.0], [48.4, 719.0], [48.5, 720.0], [48.6, 721.0], [48.7, 721.0], [48.8, 721.0], [48.9, 721.0], [49.0, 722.0], [49.1, 722.0], [49.2, 722.0], [49.3, 722.0], [49.4, 723.0], [49.5, 724.0], [49.6, 724.0], [49.7, 725.0], [49.8, 726.0], [49.9, 726.0], [50.0, 727.0], [50.1, 727.0], [50.2, 728.0], [50.3, 728.0], [50.4, 728.0], [50.5, 729.0], [50.6, 730.0], [50.7, 730.0], [50.8, 730.0], [50.9, 731.0], [51.0, 732.0], [51.1, 733.0], [51.2, 735.0], [51.3, 735.0], [51.4, 735.0], [51.5, 736.0], [51.6, 737.0], [51.7, 739.0], [51.8, 740.0], [51.9, 741.0], [52.0, 742.0], [52.1, 743.0], [52.2, 743.0], [52.3, 744.0], [52.4, 746.0], [52.5, 747.0], [52.6, 747.0], [52.7, 748.0], [52.8, 749.0], [52.9, 749.0], [53.0, 752.0], [53.1, 753.0], [53.2, 754.0], [53.3, 756.0], [53.4, 758.0], [53.5, 759.0], [53.6, 760.0], [53.7, 764.0], [53.8, 765.0], [53.9, 765.0], [54.0, 766.0], [54.1, 768.0], [54.2, 770.0], [54.3, 773.0], [54.4, 775.0], [54.5, 779.0], [54.6, 780.0], [54.7, 782.0], [54.8, 782.0], [54.9, 784.0], [55.0, 784.0], [55.1, 786.0], [55.2, 791.0], [55.3, 797.0], [55.4, 798.0], [55.5, 800.0], [55.6, 801.0], [55.7, 803.0], [55.8, 804.0], [55.9, 806.0], [56.0, 808.0], [56.1, 809.0], [56.2, 812.0], [56.3, 815.0], [56.4, 815.0], [56.5, 817.0], [56.6, 820.0], [56.7, 823.0], [56.8, 823.0], [56.9, 826.0], [57.0, 827.0], [57.1, 828.0], [57.2, 831.0], [57.3, 833.0], [57.4, 835.0], [57.5, 837.0], [57.6, 837.0], [57.7, 840.0], [57.8, 842.0], [57.9, 842.0], [58.0, 843.0], [58.1, 844.0], [58.2, 845.0], [58.3, 846.0], [58.4, 847.0], [58.5, 848.0], [58.6, 849.0], [58.7, 849.0], [58.8, 850.0], [58.9, 852.0], [59.0, 854.0], [59.1, 855.0], [59.2, 856.0], [59.3, 857.0], [59.4, 858.0], [59.5, 859.0], [59.6, 859.0], [59.7, 860.0], [59.8, 860.0], [59.9, 861.0], [60.0, 862.0], [60.1, 864.0], [60.2, 864.0], [60.3, 864.0], [60.4, 867.0], [60.5, 868.0], [60.6, 869.0], [60.7, 870.0], [60.8, 871.0], [60.9, 872.0], [61.0, 874.0], [61.1, 876.0], [61.2, 877.0], [61.3, 877.0], [61.4, 880.0], [61.5, 884.0], [61.6, 884.0], [61.7, 885.0], [61.8, 887.0], [61.9, 889.0], [62.0, 890.0], [62.1, 891.0], [62.2, 893.0], [62.3, 896.0], [62.4, 896.0], [62.5, 897.0], [62.6, 898.0], [62.7, 900.0], [62.8, 903.0], [62.9, 906.0], [63.0, 908.0], [63.1, 909.0], [63.2, 911.0], [63.3, 911.0], [63.4, 912.0], [63.5, 913.0], [63.6, 915.0], [63.7, 916.0], [63.8, 920.0], [63.9, 921.0], [64.0, 923.0], [64.1, 924.0], [64.2, 925.0], [64.3, 928.0], [64.4, 934.0], [64.5, 937.0], [64.6, 938.0], [64.7, 939.0], [64.8, 941.0], [64.9, 941.0], [65.0, 943.0], [65.1, 944.0], [65.2, 945.0], [65.3, 945.0], [65.4, 947.0], [65.5, 949.0], [65.6, 952.0], [65.7, 953.0], [65.8, 954.0], [65.9, 955.0], [66.0, 957.0], [66.1, 960.0], [66.2, 960.0], [66.3, 961.0], [66.4, 961.0], [66.5, 962.0], [66.6, 962.0], [66.7, 962.0], [66.8, 963.0], [66.9, 965.0], [67.0, 967.0], [67.1, 969.0], [67.2, 969.0], [67.3, 970.0], [67.4, 971.0], [67.5, 972.0], [67.6, 973.0], [67.7, 973.0], [67.8, 976.0], [67.9, 976.0], [68.0, 977.0], [68.1, 977.0], [68.2, 978.0], [68.3, 981.0], [68.4, 982.0], [68.5, 984.0], [68.6, 984.0], [68.7, 985.0], [68.8, 986.0], [68.9, 987.0], [69.0, 988.0], [69.1, 989.0], [69.2, 990.0], [69.3, 991.0], [69.4, 992.0], [69.5, 993.0], [69.6, 994.0], [69.7, 995.0], [69.8, 996.0], [69.9, 999.0], [70.0, 1000.0], [70.1, 1001.0], [70.2, 1002.0], [70.3, 1003.0], [70.4, 1004.0], [70.5, 1005.0], [70.6, 1005.0], [70.7, 1006.0], [70.8, 1008.0], [70.9, 1011.0], [71.0, 1012.0], [71.1, 1014.0], [71.2, 1015.0], [71.3, 1015.0], [71.4, 1016.0], [71.5, 1016.0], [71.6, 1016.0], [71.7, 1018.0], [71.8, 1018.0], [71.9, 1019.0], [72.0, 1019.0], [72.1, 1021.0], [72.2, 1022.0], [72.3, 1023.0], [72.4, 1023.0], [72.5, 1027.0], [72.6, 1027.0], [72.7, 1029.0], [72.8, 1032.0], [72.9, 1032.0], [73.0, 1032.0], [73.1, 1033.0], [73.2, 1035.0], [73.3, 1037.0], [73.4, 1037.0], [73.5, 1039.0], [73.6, 1039.0], [73.7, 1041.0], [73.8, 1042.0], [73.9, 1044.0], [74.0, 1046.0], [74.1, 1048.0], [74.2, 1048.0], [74.3, 1050.0], [74.4, 1052.0], [74.5, 1053.0], [74.6, 1054.0], [74.7, 1057.0], [74.8, 1058.0], [74.9, 1059.0], [75.0, 1059.0], [75.1, 1062.0], [75.2, 1064.0], [75.3, 1066.0], [75.4, 1066.0], [75.5, 1069.0], [75.6, 1074.0], [75.7, 1074.0], [75.8, 1075.0], [75.9, 1076.0], [76.0, 1080.0], [76.1, 1082.0], [76.2, 1083.0], [76.3, 1084.0], [76.4, 1085.0], [76.5, 1087.0], [76.6, 1088.0], [76.7, 1090.0], [76.8, 1092.0], [76.9, 1098.0], [77.0, 1104.0], [77.1, 1105.0], [77.2, 1107.0], [77.3, 1111.0], [77.4, 1112.0], [77.5, 1115.0], [77.6, 1116.0], [77.7, 1117.0], [77.8, 1119.0], [77.9, 1119.0], [78.0, 1120.0], [78.1, 1125.0], [78.2, 1126.0], [78.3, 1127.0], [78.4, 1127.0], [78.5, 1127.0], [78.6, 1130.0], [78.7, 1133.0], [78.8, 1136.0], [78.9, 1137.0], [79.0, 1138.0], [79.1, 1141.0], [79.2, 1143.0], [79.3, 1146.0], [79.4, 1147.0], [79.5, 1148.0], [79.6, 1148.0], [79.7, 1150.0], [79.8, 1152.0], [79.9, 1155.0], [80.0, 1156.0], [80.1, 1157.0], [80.2, 1161.0], [80.3, 1165.0], [80.4, 1165.0], [80.5, 1167.0], [80.6, 1168.0], [80.7, 1168.0], [80.8, 1172.0], [80.9, 1176.0], [81.0, 1176.0], [81.1, 1179.0], [81.2, 1180.0], [81.3, 1181.0], [81.4, 1182.0], [81.5, 1185.0], [81.6, 1188.0], [81.7, 1197.0], [81.8, 1198.0], [81.9, 1198.0], [82.0, 1200.0], [82.1, 1201.0], [82.2, 1202.0], [82.3, 1205.0], [82.4, 1206.0], [82.5, 1208.0], [82.6, 1208.0], [82.7, 1209.0], [82.8, 1209.0], [82.9, 1215.0], [83.0, 1216.0], [83.1, 1220.0], [83.2, 1224.0], [83.3, 1224.0], [83.4, 1224.0], [83.5, 1225.0], [83.6, 1226.0], [83.7, 1228.0], [83.8, 1230.0], [83.9, 1232.0], [84.0, 1236.0], [84.1, 1238.0], [84.2, 1239.0], [84.3, 1240.0], [84.4, 1242.0], [84.5, 1243.0], [84.6, 1244.0], [84.7, 1251.0], [84.8, 1253.0], [84.9, 1254.0], [85.0, 1255.0], [85.1, 1256.0], [85.2, 1258.0], [85.3, 1264.0], [85.4, 1267.0], [85.5, 1268.0], [85.6, 1270.0], [85.7, 1274.0], [85.8, 1276.0], [85.9, 1277.0], [86.0, 1278.0], [86.1, 1280.0], [86.2, 1280.0], [86.3, 1283.0], [86.4, 1284.0], [86.5, 1287.0], [86.6, 1290.0], [86.7, 1293.0], [86.8, 1297.0], [86.9, 1301.0], [87.0, 1306.0], [87.1, 1307.0], [87.2, 1313.0], [87.3, 1317.0], [87.4, 1318.0], [87.5, 1320.0], [87.6, 1320.0], [87.7, 1322.0], [87.8, 1327.0], [87.9, 1330.0], [88.0, 1331.0], [88.1, 1333.0], [88.2, 1334.0], [88.3, 1336.0], [88.4, 1339.0], [88.5, 1341.0], [88.6, 1343.0], [88.7, 1346.0], [88.8, 1353.0], [88.9, 1354.0], [89.0, 1358.0], [89.1, 1359.0], [89.2, 1359.0], [89.3, 1360.0], [89.4, 1364.0], [89.5, 1368.0], [89.6, 1373.0], [89.7, 1373.0], [89.8, 1379.0], [89.9, 1380.0], [90.0, 1382.0], [90.1, 1387.0], [90.2, 1391.0], [90.3, 1396.0], [90.4, 1400.0], [90.5, 1402.0], [90.6, 1402.0], [90.7, 1404.0], [90.8, 1404.0], [90.9, 1405.0], [91.0, 1407.0], [91.1, 1411.0], [91.2, 1413.0], [91.3, 1419.0], [91.4, 1422.0], [91.5, 1422.0], [91.6, 1432.0], [91.7, 1436.0], [91.8, 1440.0], [91.9, 1443.0], [92.0, 1447.0], [92.1, 1451.0], [92.2, 1459.0], [92.3, 1460.0], [92.4, 1466.0], [92.5, 1468.0], [92.6, 1475.0], [92.7, 1479.0], [92.8, 1489.0], [92.9, 1491.0], [93.0, 1498.0], [93.1, 1500.0], [93.2, 1502.0], [93.3, 1509.0], [93.4, 1511.0], [93.5, 1512.0], [93.6, 1520.0], [93.7, 1538.0], [93.8, 1542.0], [93.9, 1551.0], [94.0, 1558.0], [94.1, 1559.0], [94.2, 1576.0], [94.3, 1583.0], [94.4, 1587.0], [94.5, 1594.0], [94.6, 1597.0], [94.7, 1604.0], [94.8, 1606.0], [94.9, 1622.0], [95.0, 1641.0], [95.1, 1645.0], [95.2, 1652.0], [95.3, 1664.0], [95.4, 1681.0], [95.5, 1686.0], [95.6, 1723.0], [95.7, 1765.0], [95.8, 1773.0], [95.9, 1784.0], [96.0, 1789.0], [96.1, 1818.0], [96.2, 1828.0], [96.3, 1840.0], [96.4, 1845.0], [96.5, 1849.0], [96.6, 1878.0], [96.7, 1883.0], [96.8, 1899.0], [96.9, 1919.0], [97.0, 1942.0], [97.1, 1945.0], [97.2, 1959.0], [97.3, 1967.0], [97.4, 1977.0], [97.5, 1983.0], [97.6, 1992.0], [97.7, 2043.0], [97.8, 2088.0], [97.9, 2110.0], [98.0, 2129.0], [98.1, 2155.0], [98.2, 2158.0], [98.3, 2162.0], [98.4, 2179.0], [98.5, 2182.0], [98.6, 2256.0], [98.7, 2259.0], [98.8, 2287.0], [98.9, 2304.0], [99.0, 2326.0], [99.1, 2335.0], [99.2, 2364.0], [99.3, 2382.0], [99.4, 2553.0], [99.5, 2800.0], [99.6, 2965.0], [99.7, 3139.0], [99.8, 14254.0], [99.9, 27862.0]], "isOverall": false, "label": "login request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 762.0, "series": [{"data": [[600.0, 171.0], [2400.0, 2.0], [700.0, 71.0], [800.0, 44.0], [200.0, 762.0], [13800.0, 1.0], [900.0, 12.0], [1000.0, 16.0], [1100.0, 8.0], [300.0, 436.0], [1200.0, 3.0], [1300.0, 8.0], [1400.0, 4.0], [1500.0, 1.0], [400.0, 267.0], [1600.0, 7.0], [1700.0, 6.0], [27400.0, 1.0], [1800.0, 2.0], [500.0, 178.0]], "isOverall": false, "label": "login request-1", "isController": false}, {"data": [[600.0, 161.0], [700.0, 59.0], [200.0, 733.0], [800.0, 53.0], [3400.0, 1.0], [900.0, 13.0], [1000.0, 9.0], [1100.0, 9.0], [300.0, 463.0], [1200.0, 4.0], [1300.0, 4.0], [1400.0, 11.0], [1500.0, 10.0], [24500.0, 1.0], [400.0, 277.0], [1600.0, 6.0], [1700.0, 1.0], [27600.0, 1.0], [1800.0, 3.0], [500.0, 181.0]], "isOverall": false, "label": "login request-0", "isController": false}, {"data": [[600.0, 169.0], [700.0, 195.0], [800.0, 143.0], [14200.0, 1.0], [900.0, 146.0], [1000.0, 141.0], [1100.0, 100.0], [1200.0, 97.0], [1300.0, 71.0], [1400.0, 54.0], [1500.0, 31.0], [24700.0, 1.0], [1600.0, 18.0], [1700.0, 10.0], [27800.0, 1.0], [27900.0, 1.0], [1800.0, 16.0], [1900.0, 17.0], [2000.0, 4.0], [2100.0, 14.0], [2300.0, 9.0], [2200.0, 6.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [2900.0, 2.0], [3000.0, 1.0], [3100.0, 1.0], [3800.0, 1.0], [500.0, 746.0]], "isOverall": false, "label": "login request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2943.0, "series": [{"data": [[0.0, 2943.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2877.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 178.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 61.081500000000105, "minX": 1.72807242E12, "maxY": 61.081500000000105, "series": [{"data": [[1.72807242E12, 61.081500000000105]], "isOverall": false, "label": "Login thread", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72807242E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 251.0, "minX": 1.0, "maxY": 1937.7500000000002, "series": [{"data": [[2.0, 258.0], [3.0, 255.0], [4.0, 258.0], [5.0, 255.0], [6.0, 259.0], [7.0, 259.0], [8.0, 256.0], [9.0, 286.0], [10.0, 253.0], [11.0, 255.0], [12.0, 251.0], [13.0, 255.0], [14.0, 256.0], [15.0, 259.0], [16.0, 271.0], [17.0, 254.0], [18.0, 257.0], [19.0, 253.0], [20.0, 254.0], [21.0, 258.0], [23.0, 260.5], [24.0, 261.0], [25.0, 264.0], [26.0, 261.0], [27.0, 261.0], [28.0, 258.0], [29.0, 263.0], [30.0, 258.0], [31.0, 259.0], [33.0, 272.5], [35.0, 258.0851063829788], [34.0, 266.0], [37.0, 256.61538461538464], [36.0, 262.93333333333334], [39.0, 265.98984771573623], [38.0, 361.3544776119404], [41.0, 276.9555555555555], [40.0, 275.1954022988507], [43.0, 308.5], [42.0, 284.60714285714283], [45.0, 300.64285714285717], [44.0, 295.72727272727275], [47.0, 307.90000000000003], [46.0, 312.46153846153845], [49.0, 340.0714285714286], [48.0, 326.8709677419355], [51.0, 356.00000000000006], [50.0, 342.05882352941177], [53.0, 359.6], [52.0, 372.4411764705883], [55.0, 390.8666666666667], [54.0, 376.9354838709678], [57.0, 458.8823529411764], [56.0, 364.9375], [59.0, 459.4], [58.0, 401.7142857142857], [61.0, 451.8571428571429], [60.0, 389.875], [63.0, 443.0909090909091], [62.0, 406.88888888888897], [64.0, 465.46666666666664], [66.0, 464.3043478260869], [65.0, 443.125], [67.0, 466.0], [68.0, 452.0], [69.0, 489.0666666666667], [71.0, 528.3076923076925], [70.0, 511.3571428571429], [73.0, 483.7199999999999], [72.0, 488.96296296296293], [74.0, 499.9599999999999], [75.0, 543.1428571428571], [79.0, 575.0769230769231], [76.0, 495.94736842105266], [78.0, 1282.5555555555554], [77.0, 545.8461538461538], [83.0, 618.5], [82.0, 485.7333333333333], [81.0, 462.73333333333323], [80.0, 542.1052631578947], [87.0, 737.8571428571428], [86.0, 684.0909090909091], [85.0, 630.3684210526317], [84.0, 710.0], [89.0, 704.4347826086956], [88.0, 742.3636363636363], [91.0, 633.25], [90.0, 754.6896551724136], [92.0, 650.2857142857143], [94.0, 662.2142857142858], [93.0, 539.6], [95.0, 588.6666666666666], [99.0, 589.2142857142856], [98.0, 661.9], [97.0, 644.0454545454544], [96.0, 585.0714285714286], [103.0, 713.2727272727273], [102.0, 719.4166666666666], [101.0, 745.6], [100.0, 696.1578947368421], [106.0, 948.7142857142858], [104.0, 608.0625], [105.0, 700.7777777777777], [109.0, 797.3333333333334], [108.0, 659.8571428571429], [110.0, 630.0], [111.0, 928.25], [112.0, 953.3750000000001], [113.0, 990.5], [115.0, 773.5], [114.0, 661.0], [117.0, 821.2857142857143], [118.0, 692.8], [116.0, 758.5], [119.0, 699.0], [122.0, 789.25], [127.0, 694.6666666666666], [125.0, 841.8], [129.0, 711.0], [128.0, 660.0], [1.0, 258.0]], "isOverall": false, "label": "login request-1", "isController": false}, {"data": [[61.081500000000034, 450.33399999999983]], "isOverall": false, "label": "login request-1-Aggregated", "isController": false}, {"data": [[2.0, 256.0], [3.0, 254.0], [4.0, 253.0], [5.0, 267.0], [6.0, 264.0], [7.0, 271.0], [8.0, 261.0], [9.0, 266.0], [10.0, 260.0], [11.0, 264.0], [12.0, 258.0], [13.0, 263.0], [14.0, 265.0], [15.0, 273.0], [16.0, 279.0], [17.0, 275.0], [18.0, 276.0], [19.0, 274.0], [20.0, 269.0], [21.0, 271.0], [23.0, 264.5], [24.0, 271.0], [25.0, 272.0], [26.0, 278.0], [27.0, 279.0], [28.0, 267.0], [29.0, 269.0], [30.0, 264.0], [31.0, 268.0], [33.0, 260.5], [35.0, 774.5957446808505], [34.0, 254.0], [37.0, 1314.076923076923], [36.0, 260.5333333333334], [39.0, 264.6954314720812], [38.0, 260.417910447761], [41.0, 279.6444444444444], [40.0, 281.8160919540232], [43.0, 299.3333333333333], [42.0, 287.7857142857144], [45.0, 318.85714285714283], [44.0, 307.45454545454544], [47.0, 350.9500000000001], [46.0, 315.61538461538464], [49.0, 336.2499999999999], [48.0, 345.93548387096774], [51.0, 352.46666666666664], [50.0, 348.6470588235295], [53.0, 370.7], [52.0, 404.0882352941176], [55.0, 459.8666666666667], [54.0, 372.06451612903226], [57.0, 383.1176470588235], [56.0, 422.0625], [59.0, 391.4], [58.0, 360.7142857142857], [61.0, 393.2857142857143], [60.0, 433.375], [63.0, 571.9090909090909], [62.0, 442.6111111111111], [64.0, 489.59999999999997], [66.0, 486.34782608695656], [65.0, 490.56250000000006], [67.0, 470.8], [68.0, 460.75], [69.0, 447.8666666666667], [71.0, 496.6923076923077], [70.0, 518.5714285714284], [73.0, 491.0800000000001], [72.0, 512.8888888888888], [74.0, 495.84], [75.0, 537.4285714285714], [79.0, 579.2307692307692], [76.0, 464.2105263157895], [78.0, 495.8888888888889], [77.0, 561.6153846153848], [83.0, 504.3], [82.0, 597.2666666666667], [81.0, 646.0666666666667], [80.0, 747.421052631579], [87.0, 664.1428571428572], [86.0, 593.3181818181819], [85.0, 625.8947368421053], [84.0, 578.5], [89.0, 575.8695652173913], [88.0, 549.5], [91.0, 587.1499999999999], [90.0, 601.5517241379309], [92.0, 759.0], [94.0, 648.2142857142857], [93.0, 569.9], [95.0, 646.5555555555557], [99.0, 651.6428571428572], [98.0, 611.85], [97.0, 685.5], [96.0, 676.3214285714288], [103.0, 896.5454545454546], [102.0, 674.8333333333334], [101.0, 725.9], [100.0, 671.1578947368421], [106.0, 685.7857142857142], [104.0, 746.6875], [105.0, 826.8888888888889], [109.0, 507.6666666666667], [108.0, 876.0], [110.0, 762.6666666666666], [111.0, 1009.125], [112.0, 868.8750000000001], [113.0, 729.6666666666666], [115.0, 717.0], [114.0, 940.25], [117.0, 1040.142857142857], [118.0, 1005.8], [116.0, 892.8333333333333], [119.0, 1194.0], [122.0, 817.5], [127.0, 913.6666666666666], [125.0, 690.2], [129.0, 800.0], [128.0, 794.0], [1.0, 256.0]], "isOverall": false, "label": "login request-0", "isController": false}, {"data": [[61.081500000000034, 459.3165000000005]], "isOverall": false, "label": "login request-0-Aggregated", "isController": false}, {"data": [[2.0, 514.0], [3.0, 510.0], [4.0, 511.0], [5.0, 522.0], [6.0, 523.0], [7.0, 530.0], [8.0, 517.0], [9.0, 552.0], [10.0, 514.0], [11.0, 519.0], [12.0, 510.0], [13.0, 518.0], [14.0, 521.0], [15.0, 532.0], [16.0, 550.0], [17.0, 529.0], [18.0, 533.0], [19.0, 527.0], [20.0, 523.0], [21.0, 529.0], [23.0, 525.5], [24.0, 532.0], [25.0, 536.0], [26.0, 539.0], [27.0, 540.0], [28.0, 526.0], [29.0, 532.0], [30.0, 522.0], [31.0, 527.0], [33.0, 533.5], [35.0, 1032.9148936170209], [34.0, 520.5], [37.0, 1570.8846153846155], [36.0, 523.6666666666666], [39.0, 530.9187817258883], [38.0, 622.055970149254], [41.0, 556.8444444444445], [40.0, 557.1839080459769], [43.0, 608.0833333333333], [42.0, 572.6071428571429], [45.0, 619.7857142857142], [44.0, 603.4545454545455], [47.0, 659.0500000000001], [46.0, 628.3846153846154], [49.0, 676.5714285714287], [48.0, 673.1935483870968], [51.0, 708.6666666666666], [50.0, 691.0294117647059], [53.0, 730.44], [52.0, 776.764705882353], [55.0, 850.8], [54.0, 749.1290322580645], [57.0, 842.1764705882354], [56.0, 787.1874999999999], [59.0, 850.8], [58.0, 762.8571428571429], [61.0, 845.1428571428571], [60.0, 823.25], [63.0, 1015.4545454545454], [62.0, 849.7222222222222], [64.0, 955.4000000000001], [66.0, 951.0], [65.0, 933.8749999999999], [67.0, 937.3], [68.0, 913.0], [69.0, 937.1999999999999], [71.0, 1025.2307692307693], [70.0, 1030.2142857142858], [73.0, 975.0], [72.0, 1002.1851851851851], [74.0, 996.1199999999999], [75.0, 1080.6666666666667], [79.0, 1154.6153846153848], [76.0, 960.2631578947368], [78.0, 1778.7222222222222], [77.0, 1107.6923076923078], [83.0, 1123.1], [82.0, 1083.0666666666666], [81.0, 1108.9333333333334], [80.0, 1289.9473684210527], [87.0, 1402.190476190476], [86.0, 1277.7727272727273], [85.0, 1256.5789473684213], [84.0, 1288.75], [89.0, 1280.3478260869565], [88.0, 1292.090909090909], [91.0, 1220.45], [90.0, 1356.4827586206898], [92.0, 1409.5], [94.0, 1310.5], [93.0, 1109.8999999999999], [95.0, 1235.3333333333333], [99.0, 1241.2142857142856], [98.0, 1273.9499999999998], [97.0, 1329.681818181818], [96.0, 1261.5357142857144], [103.0, 1610.0], [102.0, 1394.5000000000002], [101.0, 1471.5000000000002], [100.0, 1367.6315789473683], [106.0, 1634.642857142857], [104.0, 1355.0], [105.0, 1527.9999999999998], [109.0, 1305.0], [108.0, 1536.2857142857144], [110.0, 1392.6666666666667], [111.0, 1937.7500000000002], [112.0, 1822.375], [113.0, 1720.5], [115.0, 1491.0], [114.0, 1601.25], [117.0, 1861.5714285714287], [118.0, 1698.8], [116.0, 1651.5], [119.0, 1893.0], [122.0, 1606.75], [127.0, 1608.6666666666667], [125.0, 1532.2], [129.0, 1512.0], [128.0, 1454.0], [1.0, 515.0]], "isOverall": false, "label": "login request", "isController": false}, {"data": [[61.08150000000005, 909.882500000001]], "isOverall": false, "label": "login request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 129.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 26064.1, "minX": 1.72807242E12, "maxY": 264338.6666666667, "series": [{"data": [[1.72807242E12, 264338.6666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72807242E12, 26064.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72807242E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 450.33399999999983, "minX": 1.72807242E12, "maxY": 909.882500000001, "series": [{"data": [[1.72807242E12, 450.33399999999983]], "isOverall": false, "label": "login request-1", "isController": false}, {"data": [[1.72807242E12, 459.3165000000005]], "isOverall": false, "label": "login request-0", "isController": false}, {"data": [[1.72807242E12, 909.882500000001]], "isOverall": false, "label": "login request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72807242E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 435.09400000000034, "minX": 1.72807242E12, "maxY": 459.3130000000002, "series": [{"data": [[1.72807242E12, 435.09400000000034]], "isOverall": false, "label": "login request-1", "isController": false}, {"data": [[1.72807242E12, 459.3130000000002]], "isOverall": false, "label": "login request-0", "isController": false}, {"data": [[1.72807242E12, 459.3130000000001]], "isOverall": false, "label": "login request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72807242E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 265.9364999999997, "minX": 1.72807242E12, "maxY": 268.718, "series": [{"data": [[1.72807242E12, 268.718]], "isOverall": false, "label": "login request-1", "isController": false}, {"data": [[1.72807242E12, 265.9364999999997]], "isOverall": false, "label": "login request-0", "isController": false}, {"data": [[1.72807242E12, 265.9364999999997]], "isOverall": false, "label": "login request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72807242E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 249.0, "minX": 1.72807242E12, "maxY": 27934.0, "series": [{"data": [[1.72807242E12, 27934.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72807242E12, 249.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72807242E12, 1065.1000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72807242E12, 1960.0700000000015]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72807242E12, 509.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72807242E12, 1334.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72807242E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 261.0, "minX": 22.0, "maxY": 27667.0, "series": [{"data": [[135.0, 392.0], [128.0, 634.0], [172.0, 578.0], [183.0, 695.0], [179.0, 284.0], [185.0, 619.0], [189.0, 598.0], [187.0, 625.0], [188.0, 373.0], [198.0, 308.5], [204.0, 518.0], [201.0, 528.0], [200.0, 271.0], [202.0, 261.0], [210.0, 344.0], [209.0, 361.0], [219.0, 274.0], [227.0, 755.0], [230.0, 294.5], [232.0, 487.5], [277.0, 499.0], [311.0, 738.0], [22.0, 398.0], [120.0, 1065.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[204.0, 27667.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 311.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 194.5, "minX": 22.0, "maxY": 773.5, "series": [{"data": [[135.0, 369.0], [128.0, 389.0], [172.0, 473.0], [183.0, 586.0], [179.0, 261.0], [185.0, 467.5], [189.0, 485.0], [187.0, 450.0], [188.0, 363.5], [198.0, 271.0], [204.0, 377.0], [201.0, 337.0], [200.0, 260.0], [202.0, 258.0], [210.0, 337.0], [209.0, 356.0], [219.0, 265.0], [227.0, 641.0], [230.0, 285.0], [232.0, 429.0], [277.0, 433.0], [311.0, 646.0], [22.0, 258.0], [120.0, 773.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[204.0, 194.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 311.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.72807242E12, "maxY": 100.0, "series": [{"data": [[1.72807242E12, 100.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72807242E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72807242E12, "maxY": 66.63333333333334, "series": [{"data": [[1.72807242E12, 66.63333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72807242E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.72807242E12, 33.333333333333336]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72807242E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72807242E12, "maxY": 33.333333333333336, "series": [{"data": [[1.72807242E12, 0.016666666666666666]], "isOverall": false, "label": "login request-failure", "isController": false}, {"data": [[1.72807242E12, 33.333333333333336]], "isOverall": false, "label": "login request-0-success", "isController": false}, {"data": [[1.72807242E12, 33.31666666666667]], "isOverall": false, "label": "login request-1-success", "isController": false}, {"data": [[1.72807242E12, 0.016666666666666666]], "isOverall": false, "label": "login request-1-failure", "isController": false}, {"data": [[1.72807242E12, 33.31666666666667]], "isOverall": false, "label": "login request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72807242E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72807242E12, "maxY": 99.96666666666667, "series": [{"data": [[1.72807242E12, 99.96666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72807242E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72807242E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

